const axios = require('axios');
const { botToken } = require('./config');

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Telegram Bot API
const API_URL = `https://api.telegram.org/bot${botToken}`;

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Telegram
 * @param {number|string} chatId - ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç Telegram API
 */
async function sendMessage(chatId, text, options = {}) {
  try {
    const response = await axios.post(`${API_URL}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options
    });
    
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É
 * @param {number|string} chatId - ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} appointment - –î–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å–∏
 * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç Telegram API
 */
async function sendAppointmentNotification(chatId, appointment) {
  const { service, date, time } = appointment;
  const formattedDate = new Date(date).toLocaleDateString('ru-RU');
  
  const message = `
<b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É!</b>

–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:

üîπ –£—Å–ª—É–≥–∞: <b>${service}</b>
üìÖ –î–∞—Ç–∞: <b>${formattedDate}</b>
üïí –í—Ä–µ–º—è: <b>${time}</b>

–î–ª—è –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
  `;
  
  return sendMessage(chatId, message);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
 * @param {number|string} chatId - ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} order - –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
 * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç Telegram API
 */
async function sendOrderNotification(chatId, order) {
  const { orderId, total, products } = order;
  
  let productsText = products.map(p => `‚Ä¢ ${p.name} - ${p.price} —Ä—É–±. x ${p.quantity} —à—Ç.`).join('\n');
  
  const message = `
<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderId}</b>

–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç, –≤–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω:

<b>–¢–æ–≤–∞—Ä—ã:</b>
${productsText}

<b>–ò—Ç–æ–≥–æ:</b> ${total} —Ä—É–±.

–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.
  `;
  
  return sendMessage(chatId, message);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –ø—Ä–æ—Ü–µ–¥—É—Ä–µ
 * @param {number|string} chatId - ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} appointment - –î–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å–∏
 * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç Telegram API
 */
async function sendReminderNotification(chatId, appointment) {
  const { service, date, time } = appointment;
  const formattedDate = new Date(date).toLocaleDateString('ru-RU');
  
  const message = `
<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏</b>

–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –ø—Ä–æ—Ü–µ–¥—É—Ä–µ:

üîπ –£—Å–ª—É–≥–∞: <b>${service}</b>
üìÖ –î–∞—Ç–∞: <b>${formattedDate}</b>
üïí –í—Ä–µ–º—è: <b>${time}</b>

–ñ–¥–µ–º –≤–∞—Å –ø–æ –∞–¥—Ä–µ—Å—É: [–∞–¥—Ä–µ—Å —Å–∞–ª–æ–Ω–∞]
  `;
  
  return sendMessage(chatId, message);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ —á–∞—Ç
 * @param {number|string} chatId - ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} photoUrl - URL —Ñ–æ—Ç–æ –∏–ª–∏ file_id
 * @param {string} caption - –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
 * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç Telegram API
 */
async function sendPhoto(chatId, photoUrl, caption = '') {
  try {
    const response = await axios.post(`${API_URL}/sendPhoto`, {
      chat_id: chatId,
      photo: photoUrl,
      caption,
      parse_mode: 'HTML'
    });
    
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', error.message);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ webhook-–¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
 * @param {string} initData - –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram WebApp
 * @returns {boolean} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function validateWebAppData(initData) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  // —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram: https://core.telegram.org/bots/webapps#validating-data-received-via-the-web-app
  
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', initData);
  return true;
}

module.exports = {
  sendMessage,
  sendAppointmentNotification,
  sendOrderNotification,
  sendReminderNotification,
  sendPhoto,
  validateWebAppData
}; 